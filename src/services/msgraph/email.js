import { handleError } from "../../util/commonFunction";
import { getGraphClient, getPreferredUsername } from "../../util/msgraph/authHandler";
import { graphConfig, msGraphAPI } from "../../util/msgraph/graphConfig";
import logger from 'loglevel';
import { GraphRequestOptions, PageCollection, PageIterator } from '@microsoft/microsoft-graph-client';
import { getUserDetails } from "./user";

//export enum wellKnownFolders {
//    "archive",
//    "clutter",
//    "conflicts",
//    "conversationhistory",
//    "deleteditems",
//    "drafts",
//    "inbox",
//    "junkemail",
//    "localfailures",
//    "msgfolderroot",
//    "outbox",
//    "recoverableitemsdeletions",
//    "scheduled",
//    "searchfolders",
//    "sentitems",
//    "serverfailures",
//    "syncissues",
//}


/*
*
* +-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | Object: mailFolder                                                                                                                                                                                                                                                                                                                                        |
* +-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | Reference: https://docs.microsoft.com/en-us/graph/api/resources/mailfolder?view=graph-rest-1.0                                                                                                                                                                                                                                                            |
* +------------------+---------+---------------------------------------------------------------------------------------------------------------------------------------------------+
* | Property         | Type    | Description                                                                                                                                       |
* +------------------+---------+---------------------------------------------------------------------------------------------------------------------------------------------------+
* | childFolderCount | Int32   | The number of immediate child mailFolders in the current mailFolder.                                                                              |
* +------------------+---------+---------------------------------------------------------------------------------------------------------------------------------------------------+
* | displayName      | String  | The mailFolder's display name.                                                                                                                    |
* +------------------+---------+---------------------------------------------------------------------------------------------------------------------------------------------------+
* | id               | String  | The mailFolder's unique identifier.                                                                                                               |
* +------------------+---------+---------------------------------------------------------------------------------------------------------------------------------------------------+
* | isHidden         | Boolean | Indicates whether the mailFolder is hidden. This property can be set only when creating the folder. Find more information in Hidden mail folders. |
* +------------------+---------+---------------------------------------------------------------------------------------------------------------------------------------------------+
* | parentFolderId   | String  | The unique identifier for the mailFolder's parent mailFolder.                                                                                     |
* +------------------+---------+---------------------------------------------------------------------------------------------------------------------------------------------------+
* | totalItemCount   | Int32   | The number of items in the mailFolder.                                                                                                            |
* +------------------+---------+---------------------------------------------------------------------------------------------------------------------------------------------------+
* | unreadItemCount  | Int32   | The number of items in the mailFolder marked as unread.                                                                                           |
* +------------------+---------+---------------------------------------------------------------------------------------------------------------------------------------------------+
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | Well-known   folder name  | Description                                                                                                                                                                                                                                                                                                                   |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | archive                   | The archive folder messages are   sent to when using the One_Click Archive feature in Outlook clients that   support it. Note: this is not   the same as the Archive Mailbox feature of Exchange online.                                                                                                                      |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | clutter                   | The clutter folder low-priority   messages are moved to when using the Clutter feature.                                                                                                                                                                                                                                       |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | conflicts                 | The folder that contains   conflicting items in the mailbox.                                                                                                                                                                                                                                                                  |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | conversationhistory       | The folder where Skype saves IM   conversations (if Skype is configured to do so).                                                                                                                                                                                                                                            |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | deleteditems              | The folder items are moved to   when they are deleted.                                                                                                                                                                                                                                                                        |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | drafts                    | The folder that contains unsent   messages.                                                                                                                                                                                                                                                                                   |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | inbox                     | The inbox folder.                                                                                                                                                                                                                                                                                                             |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | junkemail                 | The junk email folder.                                                                                                                                                                                                                                                                                                        |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | localfailures             | The folder that contains items   that exist on the local client but could not be uploaded to the server.                                                                                                                                                                                                                      |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | msgfolderroot             | The "Top of Information   Store" folder. This folder is the parent folder for folders that are   displayed in normal mail clients, such as the inbox.                                                                                                                                                                         |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | outbox                    | The outbox folder.                                                                                                                                                                                                                                                                                                            |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | recoverableitemsdeletions | The folder that contains   soft-deleted items: deleted either from the Deleted Items folder, or by   pressing shift+delete in Outlook. This folder is not visible in any Outlook   email client, but end users can interact with it through the Recover Deleted Items from Server   feature in Outlook or Outlook on the web. |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | scheduled                 | The folder that contains   messages that are scheduled to reappear in the inbox using the Schedule   feature in Outlook for iOS.                                                                                                                                                                                              |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | searchfolders             | The parent folder for all   search folders defined in the user's mailbox.                                                                                                                                                                                                                                                     |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | sentitems                 | The sent items folder.                                                                                                                                                                                                                                                                                                        |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | serverfailures            | The folder that contains items   that exist on the server but could not be synchronized to the local client.                                                                                                                                                                                                                  |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | syncissues                | The folder that contains   synchronization logs created by Outlook.                                                                                                                                                                                                                                                           |
* +---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
*
*/
export async function listMailFolders(top) {
    var request = {
        endpoint: graphConfig.MailFolder.Endpoint,
        scopes: graphConfig.MailFolder.Scopes.ListFolders,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .top(top || 10)
        .get();
}
export async function listNextMailFolders(nextLink) {
    var request = {
        endpoint: nextLink || graphConfig.MailFolder.Endpoint,
        scopes: graphConfig.MailFolder.Scopes.ListFolders,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .get();
}
export async function createMailFolders(name, isHidden) {
    var request = {
        endpoint: graphConfig.MailFolder.Endpoint,
        scopes: graphConfig.MailFolder.Scopes.CreateFolder,
        forceRefresh: false
    };
    const client = await getGraphClient(request);
    const mailFolder = {
        displayName: name,
        isHidden: isHidden,
    };
    return await client
        .api(request.endpoint)
        .post(mailFolder);
}
export async function getMailFolder(id) {
    var request = {
        endpoint: `${graphConfig.MailFolder.Endpoint}/${id}`,
        scopes: graphConfig.MailFolder.Scopes.GetFolder,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .get();
}
export async function updateMailFolders(id, name, isHidden) {
    var request = {
        endpoint: `${graphConfig.MailFolder.Endpoint}/${id}`,
        scopes: graphConfig.MailFolder.Scopes.UpdateFolder,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    const mailFolder = {
        displayName: name,
        isHidden: isHidden,
    };
    return await client
        .api(request.endpoint)
        .update(mailFolder);
}
export async function deleteMailFolders(id) {
    var request = {
        endpoint: `${graphConfig.MailFolder.Endpoint}/${id}`,
        scopes: graphConfig.MailFolder.Scopes.DeleteFolder,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .delete();
}
export async function listMessagesInMailFolder(id, select, top) {
    
    var request = {
        endpoint: `${graphConfig.MailFolder.Endpoint}/${id}/messages`,
        scopes: graphConfig.MailFolder.Scopes.ListMessagesInFolder,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .top(top || 10)
        .select(select)
        .get();

}
export async function listMessagesWithSizeInMailFolder(id, select, top) {
    var request = {
        endpoint: `${graphConfig.MailFolder.Endpoint}/${id}/messages?$filter=hasAttachments%20eq%20true&$expand=singleValueExtendedProperties($filter=Id%20eq%20'LONG%200x0E08')&`,
        scopes: graphConfig.MailFolder.Scopes.ListMessagesInFolder,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .top(top || 10)
        .select(select)
        //.orderby(escape("singleValueExtendedProperties/value desc"))
        .get();
}

/*
*
* +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | Object: message                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
* +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | Reference: https://docs.microsoft.com/en-us/graph/api/resources/message?view=graph-rest-1.0                                                                                                                                                                                                                                                                                                                                                                              |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | Property                   | Type                             | Description                                                                                                                                                                                                                                                                                                                                                                                              |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | bccRecipients              | recipient collection             | The Bcc: recipients for the message.                                                                                                                                                                                                                                                                                                                                                                     |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | body                       | itemBody                         | The body of the message. It can be in HTML or text format. Find out about safe HTML in a message body.                                                                                                                                                                                                                                                                                                   |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | bodyPreview                | String                           | The first 255 characters of the message body. It is in text format.                                                                                                                                                                                                                                                                                                                                      |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | categories                 | String collection                | The categories associated with the message.                                                                                                                                                                                                                                                                                                                                                              |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | ccRecipients               | recipient collection             | The Cc: recipients for the message.                                                                                                                                                                                                                                                                                                                                                                      |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | changeKey                  | String                           | The version of the message.                                                                                                                                                                                                                                                                                                                                                                              |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | conversationId             | String                           | The ID of the conversation the email belongs to.                                                                                                                                                                                                                                                                                                                                                         |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | conversationIndex          | Edm.Binary                       | Indicates the position of the message within the conversation.                                                                                                                                                                                                                                                                                                                                           |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* |                            |                                  | The date and time the message was created.                                                                                                                                                                                                                                                                                                                                                               |
* | createdDateTime            | DateTimeOffset                   |                                                                                                                                                                                                                                                                                                                                                                                                          |
* |                            |                                  |  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.                                                                                                                                                                                                                                                         |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | flag                       | followupFlag                     | The flag value that indicates the status, start date, due date, or completion date for the message.                                                                                                                                                                                                                                                                                                      |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | from                       | recipient                        | The owner of the mailbox from which the message is sent. In most cases, this value is the same as the sender  property, except for sharing or delegation scenarios. The value must  correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.                                                                                                      |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | hasAttachments             | Boolean                          | Indicates whether the message has  attachments. This property doesn't include inline attachments, so if a  message contains only inline attachments, this property is false. To  verify the existence of inline attachments, parse the body property to look for a src attribute, such as <IMG src="cid:image001.jpg@01D26CD8.6C05F070">.                                                                |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | id                         | String                           | Unique identifier for the message (note that this value may change if a message is moved or altered)                                                                                                                                                                                                                                                                                                     |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | importance                 | importance                       | The importance of the message. The possible values are: low, normal, and high.                                                                                                                                                                                                                                                                                                                           |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | inferenceClassification    | inferenceClassificationType      | The classification of the message for the  user, based on inferred relevance or importance, or on an explicit  override. The possible values are: focused or other.                                                                                                                                                                                                                                      |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* |                            | internetMessageHeader collection | A collection of message headers defined by RFC5322.  The set includes message headers indicating the network path taken by a  message from the sender to the recipient. It can also contain custom  message headers that hold app data for the message.                                                                                                                                                  |
* | internetMessageHeaders     |                                  |                                                                                                                                                                                                                                                                                                                                                                                                          |
* |                            |                                  |  Returned only on applying a $select query option. Read-only.                                                                                                                                                                                                                                                                                                                                            |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | internetMessageId          | String                           | The message ID in the format specified by RFC2822.                                                                                                                                                                                                                                                                                                                                                       |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | isDeliveryReceiptRequested | Boolean                          | Indicates whether a read receipt is requested for the message.                                                                                                                                                                                                                                                                                                                                           |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | isDraft                    | Boolean                          | Indicates whether the message is a draft. A message is a draft if it hasn't been sent yet.                                                                                                                                                                                                                                                                                                               |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | isRead                     | Boolean                          | Indicates whether the message has been read.                                                                                                                                                                                                                                                                                                                                                             |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | isReadReceiptRequested     | Boolean                          | Indicates whether a read receipt is requested for the message.                                                                                                                                                                                                                                                                                                                                           |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* |                            |                                  | The date and time the message was last changed.                                                                                                                                                                                                                                                                                                                                                          |
* | lastModifiedDateTime       | DateTimeOffset                   |                                                                                                                                                                                                                                                                                                                                                                                                          |
* |                            |                                  |  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.                                                                                                                                                                                                                                                         |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | parentFolderId             | String                           | The unique identifier for the message's parent mailFolder.                                                                                                                                                                                                                                                                                                                                               |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* |                            |                                  | The date and time the message was received.                                                                                                                                                                                                                                                                                                                                                              |
* | receivedDateTime           | DateTimeOffset                   |                                                                                                                                                                                                                                                                                                                                                                                                          |
* |                            |                                  |  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.                                                                                                                                                                                                                                                         |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | replyTo                    | recipient collection             | The email addresses to use when replying.                                                                                                                                                                                                                                                                                                                                                                |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | sender                     | recipient                        | The account that is actually used to generate the message. In most cases, this value is the same as the from property. You can set this property to a different value when sending a message from a shared mailbox, for a shared calendar, or as a delegate. In any case, the value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message. |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* |                            |                                  | The date and time the message was sent.                                                                                                                                                                                                                                                                                                                                                                  |
* | sentDateTime               | DateTimeOffset                   |                                                                                                                                                                                                                                                                                                                                                                                                          |
* |                            |                                  |  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.                                                                                                                                                                                                                                                         |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | subject                    | String                           | The subject of the message.                                                                                                                                                                                                                                                                                                                                                                              |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | toRecipients               | recipient collection             | The To: recipients for the message.                                                                                                                                                                                                                                                                                                                                                                      |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* | uniqueBody                 | itemBody                         | The part of the body of the message that is unique to the current message. uniqueBody is not returned by default but can be retrieved for a given message by use of the ?$select=uniqueBody query. It can be in HTML or text format.                                                                                                                                                                     |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* |                            |                                  | The URL to open the message in Outlook on the web.                                                                                                                                                                                                                                                                                                                                                       |
* |                            |                                  |                                                                                                                                                                                                                                                                                                                                                                                                          |
* |                            |                                  | You  can append an ispopout argument to the end of the URL to change how the  message is displayed. If ispopout is not present or if it is set to 1,  then the message is shown in a popout window. If ispopout is set to 0,  then the browser will show the message in the Outlook on the web review  pane.                                                                                             |
* | webLink                    | String                           |                                                                                                                                                                                                                                                                                                                                                                                                          |
* |                            |                                  | The message will open in the browser if you are logged in  to your mailbox via Outlook on the web. You will be prompted to login if  you are not already logged in with the browser.                                                                                                                                                                                                                     |
* |                            |                                  |                                                                                                                                                                                                                                                                                                                                                                                                          |
* |                            |                                  | This URL cannot be accessed from within an iFrame.                                                                                                                                                                                                                                                                                                                                                       |
* +----------------------------+----------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
* *
*/
export async function listMailMessages(select, top) {
    var request = {
        endpoint: graphConfig.Messages.Endpoint,
        scopes: graphConfig.Messages.Scopes.ListMessages,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .top(top || 10)
        .select(select || "sender,subject")
        .get();
}
export async function listNextMailMessages(nextLink) {
    var request = {
        endpoint: nextLink || graphConfig.Messages.Endpoint,
        scopes: graphConfig.Messages.Scopes.ListMessages,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .get();
}
export async function createMailMessageRaw(message) {
    var request = {
        endpoint: graphConfig.Messages.Endpoint,
        scopes: graphConfig.Messages.Scopes.CreateMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .post(message);
}
export async function createMailMessage(subject, importance, content, toRecipientsArray, ccRecipientsArray, bccRecipientsArray) {
    let toRecipients = [];
    let ccRecipients = [];
    let bccRecipients = [];

    if (toRecipientsArray) {
        toRecipientsArray.forEach(async (element, index) => {
            toRecipients.push({
                emailAddress: {
                    address: element
                }
            });
        });
    }
    if (ccRecipientsArray) {
        ccRecipientsArray.forEach(async (element, index) => {
            ccRecipients.push({
                emailAddress: {
                    address: element
                }
            });
        });
    }
    if (bccRecipientsArray) {
        bccRecipientsArray.forEach(async (element, index) => {
            bccRecipients.push({
                emailAddress: {
                    address: element
                }
            });
        });
    }

    const message = {
        subject: subject,
        importance: importance || "normal",
        body: {
            contentType: 'HTML',
            content: content
        },
        toRecipients: toRecipients,
        ccRecipients: ccRecipients,
        bccRecipients: bccRecipients
    };
    return await createMailMessageRaw(message);
}
export async function getMailMessage(id) {
    var request = {
        endpoint: `${graphConfig.Messages.Endpoint}/${id}`,
        scopes: graphConfig.Messages.Scopes.GetMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .get();
}
export async function updateMailMessageRaw(message) {
    var request = {
        endpoint: `${graphConfig.Messages.Endpoint}/${message.id}`,
        scopes: graphConfig.Messages.Scopes.UpdateMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .update(message);
}
export async function updateMailMessage(id, subject, importance, content, toRecipientsArray, ccRecipientsArray, bccRecipientsArray) {
    let toRecipients = [];
    let ccRecipients = [];
    let bccRecipients = [];

    if (toRecipientsArray) {
        toRecipientsArray.forEach(async (element, index) => {
            toRecipients.push({
                emailAddress: {
                    address: element
                }
            });
        });
    }
    if (ccRecipientsArray) {
        ccRecipientsArray.forEach(async (element, index) => {
            ccRecipients.push({
                emailAddress: {
                    address: element
                }
            });
        });
    }
    if (bccRecipientsArray) {
        bccRecipientsArray.forEach(async (element, index) => {
            bccRecipients.push({
                emailAddress: {
                    address: element
                }
            });
        });
    }

    const message = {
        id: id,
        subject: subject,
        importance: importance || "normal",
        body: {
            contentType: 'HTML',
            content: content
        },
        toRecipients: toRecipients,
        ccRecipients: ccRecipients,
        bccRecipients: bccRecipients
    };
    return await updateMailMessageRaw(message);
}
export async function deleteMailMessage(id) {
    var request = {
        endpoint: `${graphConfig.Messages.Endpoint}/${id}`,
        scopes: graphConfig.Messages.Scopes.DeleteMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .delete();
}
export async function sendMailMessage(id) {
    var request = {
        endpoint: `${graphConfig.Messages.Endpoint}/${id}/send`,
        scopes: graphConfig.Messages.Scopes.SendMessages,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .post();
}
export async function createReplyToMailMessage(id) {
    var request = {
        endpoint: `${graphConfig.Messages.Endpoint}/${id}/createReply`,
        scopes: graphConfig.Messages.Scopes.CreateReplyToMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .post();
}
export async function replyToMailMessage(id, content, toRecipientsArray, ccRecipientsArray, bccRecipientsArray) {
    var request = {
        endpoint: `${graphConfig.Messages.Endpoint}/${id}/reply`,
        scopes: graphConfig.Messages.Scopes.ReplyToMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);

    let toRecipients = [];
    let ccRecipients = [];
    let bccRecipients = [];

    if (toRecipientsArray) {
        toRecipientsArray.forEach(async (element, index) => {
            toRecipients.push({
                emailAddress: {
                    address: element
                }
            });
        });
    }
    if (ccRecipientsArray) {
        ccRecipientsArray.forEach(async (element, index) => {
            ccRecipients.push({
                emailAddress: {
                    address: element
                }
            });
        });
    }
    if (bccRecipientsArray) {
        bccRecipientsArray.forEach(async (element, index) => {
            bccRecipients.push({
                emailAddress: {
                    address: element
                }
            });
        });
    }

    const reply = {
        toRecipients: toRecipients,
        ccRecipients: ccRecipients,
        bccRecipients: bccRecipients,
        comment: content
    };
    return await client
        .api(request.endpoint)
        .post(reply);
}
export async function createReplyAllToMailMessage(id) {
    var request = {
        endpoint: `${graphConfig.Messages.Endpoint}/${id}/createReplyAll`,
        scopes: graphConfig.Messages.Scopes.CreateReplyAllToMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .post();
}
export async function replyAllToMailMessage(id, content) {
    var request = {
        endpoint: `${graphConfig.Messages.Endpoint}/${id}/replyAll`,
        scopes: graphConfig.Messages.Scopes.ReplyAllToMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    const replyAll = {
        comment: content
    };
    return await client
        .api(request.endpoint)
        .post(replyAll);
}
export async function createForwardMailMessage(id) {
    var request = {
        endpoint: `${graphConfig.Messages.Endpoint}/${id}/createForward`,
        scopes: graphConfig.Messages.Scopes.CreateForwardMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .post();
}
export async function forwardMailMessage(id, content, toRecipientsArray, ccRecipientsArray, bccRecipientsArray) {
    var request = {
        endpoint: `${graphConfig.Messages.Endpoint}/${id}/forward`,
        scopes: graphConfig.Messages.Scopes.ReplyToMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);

    let toRecipients = [];
    let ccRecipients = [];
    let bccRecipients = [];

    if (toRecipientsArray) {
        toRecipientsArray.forEach(async (element, index) => {
            toRecipients.push({
                emailAddress: {
                    address: element
                }
            });
        });
    }
    if (ccRecipientsArray) {
        ccRecipientsArray.forEach(async (element, index) => {
            ccRecipients.push({
                emailAddress: {
                    address: element
                }
            });
        });
    }
    if (bccRecipientsArray) {
        bccRecipientsArray.forEach(async (element, index) => {
            bccRecipients.push({
                emailAddress: {
                    address: element
                }
            });
        });
    }

    const forward = {
        toRecipients: toRecipients,
        ccRecipients: ccRecipients,
        bccRecipients: bccRecipients,
        comment: content
    };
    return await client
        .api(request.endpoint)
        .post(forward);
}
export async function sendMailRaw(message) {
    
    var request = {
        endpoint: (message.id) ? `${graphConfig.Messages.Endpoint}/${message.id}` : `${graphConfig.Messages.Endpoint}/sendMail`,
        scopes: graphConfig.Messages.Scopes.UpdateMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    
    return await client
        .api()
        .post(message);
}
export async function sendMail(subject, importance, content, toRecipientsArray, ccRecipientsArray, fileAttachmentsArray) {
    let toRecipients = [];
    let ccRecipients = [];
    let fileAttachments = [];
    if (toRecipientsArray) {
        toRecipientsArray.forEach(async (element, index) => {
            toRecipients.push({
                emailAddress: {
                    address: element
                }
            });
        });
    }
    if (ccRecipientsArray) {
        ccRecipientsArray.forEach(async (element, index) => {
            ccRecipients.push({
                emailAddress: {
                    address: element
                }
            });
        });
    }
    if (fileAttachmentsArray) {
        fileAttachmentsArray[0].forEach(async (element, index) => {
            fileAttachments.push({
                "@odata.type": "#microsoft.graph.fileAttachment",
                name: element.name,
                contentType: element.contentType,
                contentBytes: element.contentBytes
            });
        });
    }

    const message = {
        message: {
            subject: subject,
            importance: importance || "normal",
            body: {
                contentType: 'HTML',
                content: content
            },
            toRecipients: toRecipients,
            ccRecipients: ccRecipients,
            attachments: fileAttachments,
        }
    };
    var request = {
        endpoint: `${graphConfig.Me.Endpoint}/sendMail`,
        scopes: graphConfig.Messages.Scopes.SendMessages,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .post(message);
}
export async function moveMailMessageTo(id, destinationFolderIdORWellKnownFolder) {
    var request = {
        endpoint: `${graphConfig.Messages.Endpoint}/${id}/move`,
        scopes: graphConfig.Messages.Scopes.MoveMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    const message = {
        destinationId: destinationFolderIdORWellKnownFolder
    };
    return await client
        .api(request.endpoint)
        .post(message);
}
export async function markAsRead(id) {
    var request = {
        endpoint: `${graphConfig.Messages.Endpoint}/${id}`,
        scopes: graphConfig.Messages.Scopes.UpdateMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    const readMessage = {
        isRead: true,
    }
    return await client
        .api(request.endpoint)
        .patch(readMessage);
}
export async function markAsUnRead(id) {
    var request = {
        endpoint: `${graphConfig.Messages.Endpoint}/${id}`,
        scopes: graphConfig.Messages.Scopes.UpdateMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    const readMessage = {
        isRead: false,
    }
    return await client
        .api(request.endpoint)
        .patch(readMessage);
}
export async function markAsflag(id) {
    var request = {
        endpoint: `${graphConfig.Messages.Endpoint}/${id}`,
        scopes: graphConfig.Messages.Scopes.UpdateMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    const readMessage = {
        flag:{
            flagStatus: 'flagged',
        }
    }
    return await client
        .api(request.endpoint)
        .patch(readMessage);
}
export async function getMailThread(conversationId) {
    var request = {
        endpoint: graphConfig.Messages.Endpoint,
        scopes: graphConfig.Messages.Scopes.GetMessage,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .filter(escape(`conversationId eq '${conversationId}'`))
        .get();
}
export async function toggleIsReadFlag(data) {
    var request = {
        endpoint: graphConfig.Batch.Endpoint,
        scopes: graphConfig.Messages.Scopes.UpdateMessage,
        forceRefresh: false
    }
    var batchRequest = [];
    data.ids.forEach(async (element, index) => {
        batchRequest.push({
            id: index,
            method: "PATCH",
            url: `${graphConfig.Messages.Endpoint}/${element}`,
            headers: {
                "Content-Type": "application/json"
            },
            body: {
                isRead: data.isRead,
            }
        });
    });
    var batch = {
        requests :  batchRequest,
    };
    const client = await getGraphClient(request);
    return client
        .api(request.endpoint)
        .post(batch);
};

//get all unread mail per folder
export async function getMailUnread(id) {
    var request = {
        endpoint: `${graphConfig.MailFolder.Endpoint}/${id}/messages`,
        scopes: graphConfig.MailFolder.Scopes.ListMessagesInFolder,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)       
        .filter(escape(`isRead eq false`))
        .get();
};

//get all mail that send for me per folder
export async function getMailToMe(id){
    var request = {
        endpoint: `${graphConfig.MailFolder.Endpoint}/${id}/messages`,
        scopes: graphConfig.MailFolder.Scopes.ListMessagesInFolder,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)            
        .get();
}

//get all mail with flagged
export async function getMailFlagged(id) {    
    var request = {
        endpoint: `${graphConfig.MailFolder.Endpoint}/${id}/messages`,
        scopes: graphConfig.MailFolder.Scopes.ListMessagesInFolder,
        forceRefresh: false
    }
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)               
        .filter(escape(`flag/flagStatus eq 'flagged'`))
        .get();
}

//get all mail with atachments
export async function getMailHasAttachments(id) {    
    var request = {
        endpoint: `${graphConfig.MailFolder.Endpoint}/${id}/messages`,
        scopes: graphConfig.MailFolder.Scopes.ListMessagesInFolder,
        forceRefresh: false
    }
    
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint) 
        .filter(escape(`hasAttachments eq true`))
        .get();
}

//get all email mentions me
export async function getMailMentioningMe(id){
    var request = {
        endpoint: `${msGraphAPI.BetaEndpoint}${graphConfig.Messages.Endpoint}`,
        scopes: graphConfig.Messages.Scopes.ListMessages,
        forceRefresh: false
    }    
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .filter(escape("mentionsPreview/isMentioned eq true"))
        .get();
}

export async function getEmailAttachment(folderId,messageId){    
    var request = {
        endpoint: `${graphConfig.MailFolder.Endpoint}/${folderId}/messages/${messageId}/attachments`,
        scopes: graphConfig.MailFolder.Scopes.ListMessagesInFolder,
        forceRefresh: false
    }
    
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)                    
        .get();
}

export async function getEmailSenderPersona(emailAddress){        
    var request = {
        endpoint: `${graphConfig.Users.Endpoint}/${emailAddress}/photos/48x48/$value`,
        scopes: graphConfig.Users.Scopes.ListUsers,        
        forceRefresh: false,       
    }    
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint) 
        .get()
        .then((response) => {
            return URL.createObjectURL(response);
        })
        .catch(err => {
            return null;
        });
}
// export async function listMailMessagesSortByName(top,sortBy) {
//     var request = {
//         endpoint: `${graphConfig.Messages.Endpoint}?$orderby=from/emailAddress/name%20${sortBy}`,
//         scopes: graphConfig.Messages.Scopes.ListMessages,
//         forceRefresh: false
//     }

//     const client = await getGraphClient(request);
//     return await client
//         .api(request.endpoint)
//         .top(top || 10)        
//         .get();
// }

export async function listMailMessagesSortByName(id,  top,sortBy) {
    var request = {
        endpoint: `${graphConfig.MailFolder.Endpoint}/${id}/messages?$orderby=from/emailAddress/name%20${sortBy}`,
        scopes: graphConfig.MailFolder.Scopes.ListMessagesInFolder,
        forceRefresh: false
    }
    
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .top(top || 10)        
        .get();

}

export async function listMailMessagesSortByDate(id, top, sortBy) {
    var request = {
        endpoint: `${graphConfig.MailFolder.Endpoint}/${id}/messages?orderby=receivedDateTime%20${sortBy}`,
        scopes: graphConfig.MailFolder.Scopes.ListMessagesInFolder,
        forceRefresh: false
    }    
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .top(top || 10)        
        .get();

}

export async function listMailMessagesSortBySubject(id,  top,sortBy) {
    var request = {
        endpoint: `${graphConfig.MailFolder.Endpoint}/${id}/messages?$subject%20${sortBy}`,
        scopes: graphConfig.MailFolder.Scopes.ListMessagesInFolder,
        forceRefresh: false
    }
    
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .top(top || 10)        
        .get();

}

export async function listMailMessagesSortByImportance(id,  top,sortBy) {
    var request = {
        endpoint: `${graphConfig.MailFolder.Endpoint}/${id}/messages?$importance%20${sortBy}`,
        scopes: graphConfig.MailFolder.Scopes.ListMessagesInFolder,
        forceRefresh: false
    }
    
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)
        .top(top || 10)        
        .get();

}

export async function uploadToOneDrive(stream,filename) {    
    var request = {
        endpoint: `${graphConfig.Me.Endpoint}/drive/items/root:/${filename}:/content`,
        scopes: graphConfig.Me.Scopes.OneDrive,     
    }    
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)                
        .put(stream);
}


export async function searchByFrom(text) {    
    var request = {
        endpoint: `${graphConfig.Me.Endpoint}/messages/?$search="from:${text}"`,
        scopes: graphConfig.MailFolder.Scopes.ListMessagesInFolder,
    }
    
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)                
        .get();
}

export async function searchByAttachment(text) {    
    var request = {
        endpoint: `${graphConfig.Me.Endpoint}/messages/?$search="attachment:${text}"`,
        scopes: graphConfig.MailFolder.Scopes.ListMessagesInFolder,
    }
    
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)                
        .get();
}


export async function getTeamPhoto(id){
    var request = {
        endpoint: `${msGraphAPI.BetaEndpoint}${graphConfig.Teams.Endpoint}/${id}/photo/$value`,
        scopes: graphConfig.Teams.Scopes.GetTeamPhoto
    }

    const client = await getGraphClient(request);    
    return await client
        .api(request.endpoint)
        .get();        
}

export async function createForwardMessage(messageId){    
    var request = {
        endpoint: `${graphConfig.Messages.Endpoint}/${messageId}/createForward`,
        scopes: graphConfig.Messages.Scopes.ListMessages,
        forceRefresh: false
    }
    
    const client = await getGraphClient(request);
    return await client
        .api(request.endpoint)                    
        .post()
       
}